// This file is generated by kconfig_compiler from htmlexportsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef KCAL_HTMLEXPORTSETTINGS_H
#define KCAL_HTMLEXPORTSETTINGS_H

#include <kconfigskeleton.h>
#include <kdebug.h>

#include <kcal/kcal_export.h>
namespace KCal {

class KCAL_EXPORT HTMLExportSettings : public KConfigSkeleton
{
  public:

    HTMLExportSettings( const QString & application );
    ~HTMLExportSettings();

    /**
      Set Full name of the calendar owner
    */
    void setName( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "Name" ) ))
        mName = v;
    }

    /**
      Get Full name of the calendar owner
    */
    QString name() const
    {
      return mName;
    }

    /**
      Get Item object corresponding to Name()
    */
    ItemString *nameItem()
    {
      return mNameItem;
    }

    /**
      Set Email of the calendar owner
    */
    void setEMail( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "EMail" ) ))
        mEMail = v;
    }

    /**
      Get Email of the calendar owner
    */
    QString eMail() const
    {
      return mEMail;
    }

    /**
      Get Item object corresponding to EMail()
    */
    ItemString *eMailItem()
    {
      return mEMailItem;
    }

    /**
      Set Creator application
    */
    void setCreditName( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "CreditName" ) ))
        mCreditName = v;
    }

    /**
      Get Creator application
    */
    QString creditName() const
    {
      return mCreditName;
    }

    /**
      Get Item object corresponding to CreditName()
    */
    ItemString *creditNameItem()
    {
      return mCreditNameItem;
    }

    /**
      Set Creator URL
    */
    void setCreditURL( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "CreditURL" ) ))
        mCreditURL = v;
    }

    /**
      Get Creator URL
    */
    QString creditURL() const
    {
      return mCreditURL;
    }

    /**
      Get Item object corresponding to CreditURL()
    */
    ItemString *creditURLItem()
    {
      return mCreditURLItem;
    }

    /**
      Set Page Title
    */
    void setPageTitle( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "PageTitle" ) ))
        mPageTitle = v;
    }

    /**
      Get Page Title
    */
    QString pageTitle() const
    {
      return mPageTitle;
    }

    /**
      Get Item object corresponding to PageTitle()
    */
    ItemString *pageTitleItem()
    {
      return mPageTitleItem;
    }

    /**
      Set Date start
    */
    void setDateStart( const QDateTime & v )
    {
      if (!isImmutable( QString::fromLatin1( "DateStart" ) ))
        mDateStart = v;
    }

    /**
      Get Date start
    */
    QDateTime dateStart() const
    {
      return mDateStart;
    }

    /**
      Get Item object corresponding to DateStart()
    */
    ItemDateTime *dateStartItem()
    {
      return mDateStartItem;
    }

    /**
      Set Date end
    */
    void setDateEnd( const QDateTime & v )
    {
      if (!isImmutable( QString::fromLatin1( "DateEnd" ) ))
        mDateEnd = v;
    }

    /**
      Get Date end
    */
    QDateTime dateEnd() const
    {
      return mDateEnd;
    }

    /**
      Get Item object corresponding to DateEnd()
    */
    ItemDateTime *dateEndItem()
    {
      return mDateEndItem;
    }

    /**
      Set Output filename
    */
    void setOutputFile( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "OutputFile" ) ))
        mOutputFile = v;
    }

    /**
      Get Output filename
    */
    QString outputFile() const
    {
      return mOutputFile;
    }

    /**
      Get Item object corresponding to OutputFile()
    */
    ItemPath *outputFileItem()
    {
      return mOutputFileItem;
    }

    /**
      Set Style sheet
    */
    void setStyleSheet( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "StyleSheet" ) ))
        mStyleSheet = v;
    }

    /**
      Get Style sheet
    */
    QString styleSheet() const
    {
      return mStyleSheet;
    }

    /**
      Get Item object corresponding to StyleSheet()
    */
    ItemString *styleSheetItem()
    {
      return mStyleSheetItem;
    }

    /**
      Set Exclude private incidences from the export
    */
    void setExcludePrivate( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "ExcludePrivate" ) ))
        mExcludePrivate = v;
    }

    /**
      Get Exclude private incidences from the export
    */
    bool excludePrivate() const
    {
      return mExcludePrivate;
    }

    /**
      Get Item object corresponding to ExcludePrivate()
    */
    ItemBool *excludePrivateItem()
    {
      return mExcludePrivateItem;
    }

    /**
      Set Exclude confidential incidences from the export
    */
    void setExcludeConfidential( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "ExcludeConfidential" ) ))
        mExcludeConfidential = v;
    }

    /**
      Get Exclude confidential incidences from the export
    */
    bool excludeConfidential() const
    {
      return mExcludeConfidential;
    }

    /**
      Get Item object corresponding to ExcludeConfidential()
    */
    ItemBool *excludeConfidentialItem()
    {
      return mExcludeConfidentialItem;
    }

    /**
      Set Export events as list
    */
    void setEventView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "EventView" ) ))
        mEventView = v;
    }

    /**
      Get Export events as list
    */
    bool eventView() const
    {
      return mEventView;
    }

    /**
      Get Item object corresponding to EventView()
    */
    ItemBool *eventViewItem()
    {
      return mEventViewItem;
    }

    /**
      Set Export in month view
    */
    void setMonthView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "MonthView" ) ))
        mMonthView = v;
    }

    /**
      Get Export in month view
    */
    bool monthView() const
    {
      return mMonthView;
    }

    /**
      Get Item object corresponding to MonthView()
    */
    ItemBool *monthViewItem()
    {
      return mMonthViewItem;
    }

    /**
      Set Export in week view
    */
    void setWeekView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "WeekView" ) ))
        mWeekView = v;
    }

    /**
      Get Export in week view
    */
    bool weekView() const
    {
      return mWeekView;
    }

    /**
      Get Item object corresponding to WeekView()
    */
    ItemBool *weekViewItem()
    {
      return mWeekViewItem;
    }

    /**
      Set Title of the calendar
    */
    void setEventTitle( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "EventTitle" ) ))
        mEventTitle = v;
    }

    /**
      Get Title of the calendar
    */
    QString eventTitle() const
    {
      return mEventTitle;
    }

    /**
      Get Item object corresponding to EventTitle()
    */
    ItemString *eventTitleItem()
    {
      return mEventTitleItem;
    }

    /**
      Set Export location of the events
    */
    void setEventLocation( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "EventLocation" ) ))
        mEventLocation = v;
    }

    /**
      Get Export location of the events
    */
    bool eventLocation() const
    {
      return mEventLocation;
    }

    /**
      Get Item object corresponding to EventLocation()
    */
    ItemBool *eventLocationItem()
    {
      return mEventLocationItem;
    }

    /**
      Set Export categories of the events
    */
    void setEventCategories( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "EventCategories" ) ))
        mEventCategories = v;
    }

    /**
      Get Export categories of the events
    */
    bool eventCategories() const
    {
      return mEventCategories;
    }

    /**
      Get Item object corresponding to EventCategories()
    */
    ItemBool *eventCategoriesItem()
    {
      return mEventCategoriesItem;
    }

    /**
      Set Export attendees of the events
    */
    void setEventAttendees( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "EventAttendees" ) ))
        mEventAttendees = v;
    }

    /**
      Get Export attendees of the events
    */
    bool eventAttendees() const
    {
      return mEventAttendees;
    }

    /**
      Get Item object corresponding to EventAttendees()
    */
    ItemBool *eventAttendeesItem()
    {
      return mEventAttendeesItem;
    }

    /**
      Set Export to-do list
    */
    void setTodoView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "TodoView" ) ))
        mTodoView = v;
    }

    /**
      Get Export to-do list
    */
    bool todoView() const
    {
      return mTodoView;
    }

    /**
      Get Item object corresponding to TodoView()
    */
    ItemBool *todoViewItem()
    {
      return mTodoViewItem;
    }

    /**
      Set Title of the to-do list
    */
    void setTodoListTitle( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "TodoListTitle" ) ))
        mTodoListTitle = v;
    }

    /**
      Get Title of the to-do list
    */
    QString todoListTitle() const
    {
      return mTodoListTitle;
    }

    /**
      Get Item object corresponding to TodoListTitle()
    */
    ItemString *todoListTitleItem()
    {
      return mTodoListTitleItem;
    }

    /**
      Set Export due dates of the to-dos
    */
    void setTaskDueDate( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "TaskDueDate" ) ))
        mTaskDueDate = v;
    }

    /**
      Get Export due dates of the to-dos
    */
    bool taskDueDate() const
    {
      return mTaskDueDate;
    }

    /**
      Get Item object corresponding to TaskDueDate()
    */
    ItemBool *taskDueDateItem()
    {
      return mTaskDueDateItem;
    }

    /**
      Set Export location of the to-dos
    */
    void setTaskLocation( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "TaskLocation" ) ))
        mTaskLocation = v;
    }

    /**
      Get Export location of the to-dos
    */
    bool taskLocation() const
    {
      return mTaskLocation;
    }

    /**
      Get Item object corresponding to TaskLocation()
    */
    ItemBool *taskLocationItem()
    {
      return mTaskLocationItem;
    }

    /**
      Set Export categories of the to-dos
    */
    void setTaskCategories( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "TaskCategories" ) ))
        mTaskCategories = v;
    }

    /**
      Get Export categories of the to-dos
    */
    bool taskCategories() const
    {
      return mTaskCategories;
    }

    /**
      Get Item object corresponding to TaskCategories()
    */
    ItemBool *taskCategoriesItem()
    {
      return mTaskCategoriesItem;
    }

    /**
      Set Export attendees of the to-dos
    */
    void setTaskAttendees( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "TaskAttendees" ) ))
        mTaskAttendees = v;
    }

    /**
      Get Export attendees of the to-dos
    */
    bool taskAttendees() const
    {
      return mTaskAttendees;
    }

    /**
      Get Item object corresponding to TaskAttendees()
    */
    ItemBool *taskAttendeesItem()
    {
      return mTaskAttendeesItem;
    }

    /**
      Set Export journals
    */
    void setJournalView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "JournalView" ) ))
        mJournalView = v;
    }

    /**
      Get Export journals
    */
    bool journalView() const
    {
      return mJournalView;
    }

    /**
      Get Item object corresponding to JournalView()
    */
    ItemBool *journalViewItem()
    {
      return mJournalViewItem;
    }

    /**
      Set Title of the journal list
    */
    void setJournalTitle( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "JournalTitle" ) ))
        mJournalTitle = v;
    }

    /**
      Get Title of the journal list
    */
    QString journalTitle() const
    {
      return mJournalTitle;
    }

    /**
      Get Item object corresponding to JournalTitle()
    */
    ItemString *journalTitleItem()
    {
      return mJournalTitleItem;
    }

    /**
      Set Export journals
    */
    void setFreeBusyView( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "FreeBusyView" ) ))
        mFreeBusyView = v;
    }

    /**
      Get Export journals
    */
    bool freeBusyView() const
    {
      return mFreeBusyView;
    }

    /**
      Get Item object corresponding to FreeBusyView()
    */
    ItemBool *freeBusyViewItem()
    {
      return mFreeBusyViewItem;
    }

    /**
      Set Title of the free/busy list
    */
    void setFreeBusyTitle( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "FreeBusyTitle" ) ))
        mFreeBusyTitle = v;
    }

    /**
      Get Title of the free/busy list
    */
    QString freeBusyTitle() const
    {
      return mFreeBusyTitle;
    }

    /**
      Get Item object corresponding to FreeBusyTitle()
    */
    ItemString *freeBusyTitleItem()
    {
      return mFreeBusyTitleItem;
    }

  protected:
  public:
    QString mParamapplication;

    // $(application)-General
    QString mName;
    QString mEMail;
    QString mCreditName;
    QString mCreditURL;
    QString mPageTitle;
    QDateTime mDateStart;
    QDateTime mDateEnd;
    QString mOutputFile;
    QString mStyleSheet;
    bool mExcludePrivate;
    bool mExcludeConfidential;

    // $(application)-Events
    bool mEventView;
    bool mMonthView;
    bool mWeekView;
    QString mEventTitle;
    bool mEventLocation;
    bool mEventCategories;
    bool mEventAttendees;

    // $(application)-Todos
    bool mTodoView;
    QString mTodoListTitle;
    bool mTaskDueDate;
    bool mTaskLocation;
    bool mTaskCategories;
    bool mTaskAttendees;

    // $(application)-Journals
    bool mJournalView;
    QString mJournalTitle;

    // $(application)-FreeBusy
    bool mFreeBusyView;
    QString mFreeBusyTitle;

  private:
    ItemString *mNameItem;
    ItemString *mEMailItem;
    ItemString *mCreditNameItem;
    ItemString *mCreditURLItem;
    ItemString *mPageTitleItem;
    ItemDateTime *mDateStartItem;
    ItemDateTime *mDateEndItem;
    ItemPath *mOutputFileItem;
    ItemString *mStyleSheetItem;
    ItemBool *mExcludePrivateItem;
    ItemBool *mExcludeConfidentialItem;
    ItemBool *mEventViewItem;
    ItemBool *mMonthViewItem;
    ItemBool *mWeekViewItem;
    ItemString *mEventTitleItem;
    ItemBool *mEventLocationItem;
    ItemBool *mEventCategoriesItem;
    ItemBool *mEventAttendeesItem;
    ItemBool *mTodoViewItem;
    ItemString *mTodoListTitleItem;
    ItemBool *mTaskDueDateItem;
    ItemBool *mTaskLocationItem;
    ItemBool *mTaskCategoriesItem;
    ItemBool *mTaskAttendeesItem;
    ItemBool *mJournalViewItem;
    ItemString *mJournalTitleItem;
    ItemBool *mFreeBusyViewItem;
    ItemString *mFreeBusyTitleItem;
};

}

#endif

