/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef gnome_pilot_H
#define gnome_pilot_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'p'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 't'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_string* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'p'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_GNOME_Pilot_StringSequence_defined)
#define _GNOME_Pilot_StringSequence_defined 1
typedef CORBA_sequence_CORBA_string GNOME_Pilot_StringSequence;
#define GNOME_Pilot_StringSequence_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define GNOME_Pilot_StringSequence_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_Pilot_StringSequence_0)
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_StringSequence_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_StringSequence_struct;
#define TC_GNOME_Pilot_StringSequence ((CORBA_TypeCode)&TC_GNOME_Pilot_StringSequence_struct)
#endif
#define GNOME_Pilot_StringSequence__alloc() ((GNOME_Pilot_StringSequence *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define GNOME_Pilot_StringSequence__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define GNOME_Pilot_StringSequence_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_6 'p'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_8 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_9 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_10 't'
#if !defined(_CORBA_sequence_CORBA_long_defined)
#define _CORBA_sequence_CORBA_long_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_long* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_long;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_6 'p'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_8 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_9 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
#define CORBA_sequence_CORBA_long__alloc() ((CORBA_sequence_CORBA_long *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
#define CORBA_sequence_CORBA_long__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#endif
#if !defined(_GNOME_Pilot_LongSequence_defined)
#define _GNOME_Pilot_LongSequence_defined 1
typedef CORBA_sequence_CORBA_long GNOME_Pilot_LongSequence;
#define GNOME_Pilot_LongSequence_marshal(x,y,z) CORBA_sequence_CORBA_long_marshal((x),(y),(z))
#define GNOME_Pilot_LongSequence_demarshal(x,y,z,i) CORBA_sequence_CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_Pilot_LongSequence_0)
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_LongSequence_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_LongSequence_struct;
#define TC_GNOME_Pilot_LongSequence ((CORBA_TypeCode)&TC_GNOME_Pilot_LongSequence_struct)
#endif
#define GNOME_Pilot_LongSequence__alloc() ((GNOME_Pilot_LongSequence *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
#define GNOME_Pilot_LongSequence__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
#define GNOME_Pilot_LongSequence_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#endif
#undef ex_GNOME_Pilot_UnknownPilot
#define ex_GNOME_Pilot_UnknownPilot "IDL:GNOME/Pilot/UnknownPilot:1.0"
#if !defined(_GNOME_Pilot_UnknownPilot_defined)
#define _GNOME_Pilot_UnknownPilot_defined 1
typedef struct GNOME_Pilot_UnknownPilot_type GNOME_Pilot_UnknownPilot;
struct GNOME_Pilot_UnknownPilot_type {
CORBA_string pilotId;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_UnknownPilot_0)
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownPilot_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_UnknownPilot_struct;
#define TC_GNOME_Pilot_UnknownPilot ((CORBA_TypeCode)&TC_GNOME_Pilot_UnknownPilot_struct)
#endif
#define GNOME_Pilot_UnknownPilot__alloc() ((GNOME_Pilot_UnknownPilot *)ORBit_small_alloc (TC_GNOME_Pilot_UnknownPilot))
#define GNOME_Pilot_UnknownPilot__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_UnknownPilot,(m),(d))
#endif
#undef ex_GNOME_Pilot_UnknownUser
#define ex_GNOME_Pilot_UnknownUser "IDL:GNOME/Pilot/UnknownUser:1.0"
#if !defined(_GNOME_Pilot_UnknownUser_defined)
#define _GNOME_Pilot_UnknownUser_defined 1
typedef struct GNOME_Pilot_UnknownUser_type GNOME_Pilot_UnknownUser;
struct GNOME_Pilot_UnknownUser_type {
CORBA_string user;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_UnknownUser_0)
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownUser_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_UnknownUser_struct;
#define TC_GNOME_Pilot_UnknownUser ((CORBA_TypeCode)&TC_GNOME_Pilot_UnknownUser_struct)
#endif
#define GNOME_Pilot_UnknownUser__alloc() ((GNOME_Pilot_UnknownUser *)ORBit_small_alloc (TC_GNOME_Pilot_UnknownUser))
#define GNOME_Pilot_UnknownUser__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_UnknownUser,(m),(d))
#endif
#undef ex_GNOME_Pilot_UnknownConduit
#define ex_GNOME_Pilot_UnknownConduit "IDL:GNOME/Pilot/UnknownConduit:1.0"
#if !defined(_GNOME_Pilot_UnknownConduit_defined)
#define _GNOME_Pilot_UnknownConduit_defined 1
typedef struct GNOME_Pilot_UnknownConduit_type GNOME_Pilot_UnknownConduit;
struct GNOME_Pilot_UnknownConduit_type {
CORBA_string conduit;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_UnknownConduit_0)
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_UnknownConduit_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_UnknownConduit_struct;
#define TC_GNOME_Pilot_UnknownConduit ((CORBA_TypeCode)&TC_GNOME_Pilot_UnknownConduit_struct)
#endif
#define GNOME_Pilot_UnknownConduit__alloc() ((GNOME_Pilot_UnknownConduit *)ORBit_small_alloc (TC_GNOME_Pilot_UnknownConduit))
#define GNOME_Pilot_UnknownConduit__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_UnknownConduit,(m),(d))
#endif
#undef ex_GNOME_Pilot_MissingFile
#define ex_GNOME_Pilot_MissingFile "IDL:GNOME/Pilot/MissingFile:1.0"
#if !defined(_GNOME_Pilot_MissingFile_defined)
#define _GNOME_Pilot_MissingFile_defined 1
typedef struct GNOME_Pilot_MissingFile_type GNOME_Pilot_MissingFile;
struct GNOME_Pilot_MissingFile_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_MissingFile_0)
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_MissingFile_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_MissingFile_struct;
#define TC_GNOME_Pilot_MissingFile ((CORBA_TypeCode)&TC_GNOME_Pilot_MissingFile_struct)
#endif
#define GNOME_Pilot_MissingFile__alloc() ((GNOME_Pilot_MissingFile *)ORBit_small_alloc (TC_GNOME_Pilot_MissingFile))
#define GNOME_Pilot_MissingFile__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_MissingFile,(m),(d))
#endif
#undef ex_GNOME_Pilot_NoAccess
#define ex_GNOME_Pilot_NoAccess "IDL:GNOME/Pilot/NoAccess:1.0"
#if !defined(_GNOME_Pilot_NoAccess_defined)
#define _GNOME_Pilot_NoAccess_defined 1
typedef struct GNOME_Pilot_NoAccess_type GNOME_Pilot_NoAccess;
struct GNOME_Pilot_NoAccess_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_NoAccess_0)
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoAccess_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_NoAccess_struct;
#define TC_GNOME_Pilot_NoAccess ((CORBA_TypeCode)&TC_GNOME_Pilot_NoAccess_struct)
#endif
#define GNOME_Pilot_NoAccess__alloc() ((GNOME_Pilot_NoAccess *)ORBit_small_alloc (TC_GNOME_Pilot_NoAccess))
#define GNOME_Pilot_NoAccess__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_NoAccess,(m),(d))
#endif
#undef ex_GNOME_Pilot_NoMonitors
#define ex_GNOME_Pilot_NoMonitors "IDL:GNOME/Pilot/NoMonitors:1.0"
#if !defined(_GNOME_Pilot_NoMonitors_defined)
#define _GNOME_Pilot_NoMonitors_defined 1
typedef struct GNOME_Pilot_NoMonitors_type GNOME_Pilot_NoMonitors;
struct GNOME_Pilot_NoMonitors_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_NoMonitors_0)
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoMonitors_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_NoMonitors_struct;
#define TC_GNOME_Pilot_NoMonitors ((CORBA_TypeCode)&TC_GNOME_Pilot_NoMonitors_struct)
#endif
#define GNOME_Pilot_NoMonitors__alloc() ((GNOME_Pilot_NoMonitors *)ORBit_small_alloc (TC_GNOME_Pilot_NoMonitors))
#define GNOME_Pilot_NoMonitors__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_NoMonitors,(m),(d))
#endif
#undef ex_GNOME_Pilot_NoSuchHandle
#define ex_GNOME_Pilot_NoSuchHandle "IDL:GNOME/Pilot/NoSuchHandle:1.0"
#if !defined(_GNOME_Pilot_NoSuchHandle_defined)
#define _GNOME_Pilot_NoSuchHandle_defined 1
typedef struct GNOME_Pilot_NoSuchHandle_type GNOME_Pilot_NoSuchHandle;
struct GNOME_Pilot_NoSuchHandle_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_0)
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_NoSuchHandle_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_NoSuchHandle_struct;
#define TC_GNOME_Pilot_NoSuchHandle ((CORBA_TypeCode)&TC_GNOME_Pilot_NoSuchHandle_struct)
#endif
#define GNOME_Pilot_NoSuchHandle__alloc() ((GNOME_Pilot_NoSuchHandle *)ORBit_small_alloc (TC_GNOME_Pilot_NoSuchHandle))
#define GNOME_Pilot_NoSuchHandle__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_NoSuchHandle,(m),(d))
#endif
#undef ex_GNOME_Pilot_PilotBusy
#define ex_GNOME_Pilot_PilotBusy "IDL:GNOME/Pilot/PilotBusy:1.0"
#if !defined(_GNOME_Pilot_PilotBusy_defined)
#define _GNOME_Pilot_PilotBusy_defined 1
typedef struct GNOME_Pilot_PilotBusy_type GNOME_Pilot_PilotBusy;
struct GNOME_Pilot_PilotBusy_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_PilotBusy_0)
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_PilotBusy_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_PilotBusy_struct;
#define TC_GNOME_Pilot_PilotBusy ((CORBA_TypeCode)&TC_GNOME_Pilot_PilotBusy_struct)
#endif
#define GNOME_Pilot_PilotBusy__alloc() ((GNOME_Pilot_PilotBusy *)ORBit_small_alloc (TC_GNOME_Pilot_PilotBusy))
#define GNOME_Pilot_PilotBusy__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_PilotBusy,(m),(d))
#endif
#undef ex_GNOME_Pilot_CradleBusy
#define ex_GNOME_Pilot_CradleBusy "IDL:GNOME/Pilot/CradleBusy:1.0"
#if !defined(_GNOME_Pilot_CradleBusy_defined)
#define _GNOME_Pilot_CradleBusy_defined 1
typedef struct GNOME_Pilot_CradleBusy_type GNOME_Pilot_CradleBusy;
struct GNOME_Pilot_CradleBusy_type {
int dummy;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_CradleBusy_0)
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_CradleBusy_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_CradleBusy_struct;
#define TC_GNOME_Pilot_CradleBusy ((CORBA_TypeCode)&TC_GNOME_Pilot_CradleBusy_struct)
#endif
#define GNOME_Pilot_CradleBusy__alloc() ((GNOME_Pilot_CradleBusy *)ORBit_small_alloc (TC_GNOME_Pilot_CradleBusy))
#define GNOME_Pilot_CradleBusy__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_CradleBusy,(m),(d))
#endif
#if !defined(_GNOME_Pilot_ConfigErrorType_defined)
#define _GNOME_Pilot_ConfigErrorType_defined 1
typedef enum {
  GNOME_Pilot_DEVICE_MISSING,
  GNOME_Pilot_DEVICE_CANNOT_BE_OPENED
} GNOME_Pilot_ConfigErrorType;
#if !defined(TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_0)
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConfigErrorType_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_ConfigErrorType_struct;
#define TC_GNOME_Pilot_ConfigErrorType ((CORBA_TypeCode)&TC_GNOME_Pilot_ConfigErrorType_struct)
#endif
#endif
#undef ex_GNOME_Pilot_ConfigError
#define ex_GNOME_Pilot_ConfigError "IDL:GNOME/Pilot/ConfigError:1.0"
#if !defined(_GNOME_Pilot_ConfigError_defined)
#define _GNOME_Pilot_ConfigError_defined 1
typedef struct GNOME_Pilot_ConfigError_type GNOME_Pilot_ConfigError;
struct GNOME_Pilot_ConfigError_type {
GNOME_Pilot_ConfigErrorType errorType;
CORBA_string message;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_ConfigError_0)
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConfigError_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_ConfigError_struct;
#define TC_GNOME_Pilot_ConfigError ((CORBA_TypeCode)&TC_GNOME_Pilot_ConfigError_struct)
#endif
#define GNOME_Pilot_ConfigError__alloc() ((GNOME_Pilot_ConfigError *)ORBit_small_alloc (TC_GNOME_Pilot_ConfigError))
#define GNOME_Pilot_ConfigError__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_ConfigError,(m),(d))
#endif
#if !defined(_GNOME_Pilot_Survival_defined)
#define _GNOME_Pilot_Survival_defined 1
typedef enum {
  GNOME_Pilot_IMMEDIATE,
  GNOME_Pilot_PERSISTENT
} GNOME_Pilot_Survival;
#if !defined(TC_IMPL_TC_GNOME_Pilot_Survival_0)
#define TC_IMPL_TC_GNOME_Pilot_Survival_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_Survival_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_Survival_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_Survival_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_Survival_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_Survival_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_Survival_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_Survival_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_Survival_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_Survival_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_Survival_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_Survival_struct;
#define TC_GNOME_Pilot_Survival ((CORBA_TypeCode)&TC_GNOME_Pilot_Survival_struct)
#endif
#endif
#if !defined(_GNOME_Pilot_EventType_defined)
#define _GNOME_Pilot_EventType_defined 1
typedef enum {
  GNOME_Pilot_NOTIFY_CONNECT,
  GNOME_Pilot_NOTIFY_DISCONNECT,
  GNOME_Pilot_NOTIFY_BACKUP,
  GNOME_Pilot_NOTIFY_CONDUIT,
  GNOME_Pilot_NOTIFY_REQUEST_COMPLETION,
  GNOME_Pilot_NOTIFY_REQUEST_TIMEOUT,
  GNOME_Pilot_NOTIFY_USERINFO_REQUESTED,
  GNOME_Pilot_NOTIFY_SYSINFO_REQUESTED,
  GNOME_Pilot_NOTIFY_USERINFO_SENT
} GNOME_Pilot_EventType;
#if !defined(TC_IMPL_TC_GNOME_Pilot_EventType_0)
#define TC_IMPL_TC_GNOME_Pilot_EventType_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_EventType_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_EventType_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_EventType_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_EventType_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_EventType_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_EventType_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_EventType_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_EventType_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_EventType_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_EventType_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_EventType_struct;
#define TC_GNOME_Pilot_EventType ((CORBA_TypeCode)&TC_GNOME_Pilot_EventType_struct)
#endif
#endif
#if !defined(_GNOME_Pilot_ConduitOperation_defined)
#define _GNOME_Pilot_ConduitOperation_defined 1
typedef enum {
  GNOME_Pilot_SYNCHRONIZE,
  GNOME_Pilot_CONDUIT_DEFAULT,
  GNOME_Pilot_COPY_FROM_PILOT,
  GNOME_Pilot_COPY_TO_PILOT,
  GNOME_Pilot_MERGE_FROM_PILOT,
  GNOME_Pilot_MERGE_TO_PILOT
} GNOME_Pilot_ConduitOperation;
#if !defined(TC_IMPL_TC_GNOME_Pilot_ConduitOperation_0)
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_ConduitOperation_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_ConduitOperation_struct;
#define TC_GNOME_Pilot_ConduitOperation ((CORBA_TypeCode)&TC_GNOME_Pilot_ConduitOperation_struct)
#endif
#endif
#if !defined(_GNOME_Pilot_UserInfo_defined)
#define _GNOME_Pilot_UserInfo_defined 1
typedef struct GNOME_Pilot_UserInfo_type GNOME_Pilot_UserInfo;
struct GNOME_Pilot_UserInfo_type {
CORBA_unsigned_long userID;
CORBA_string username;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_UserInfo_0)
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_UserInfo_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_UserInfo_struct;
#define TC_GNOME_Pilot_UserInfo ((CORBA_TypeCode)&TC_GNOME_Pilot_UserInfo_struct)
#endif
#define GNOME_Pilot_UserInfo__alloc() ((GNOME_Pilot_UserInfo *)ORBit_small_alloc (TC_GNOME_Pilot_UserInfo))
#define GNOME_Pilot_UserInfo__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_UserInfo,(m),(d))
#endif
#if !defined(_GNOME_Pilot_SysInfo_defined)
#define _GNOME_Pilot_SysInfo_defined 1
typedef struct GNOME_Pilot_SysInfo_type GNOME_Pilot_SysInfo;
struct GNOME_Pilot_SysInfo_type {
CORBA_long romSize;
CORBA_long ramSize;
CORBA_long ramFree;
CORBA_string name;
CORBA_string manufacturer;
CORBA_long creation;
CORBA_long romVersion;
};

#if !defined(TC_IMPL_TC_GNOME_Pilot_SysInfo_0)
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_SysInfo_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_SysInfo_struct;
#define TC_GNOME_Pilot_SysInfo ((CORBA_TypeCode)&TC_GNOME_Pilot_SysInfo_struct)
#endif
#define GNOME_Pilot_SysInfo__alloc() ((GNOME_Pilot_SysInfo *)ORBit_small_alloc (TC_GNOME_Pilot_SysInfo))
#define GNOME_Pilot_SysInfo__freekids(m,d) ORBit_small_freekids (TC_GNOME_Pilot_SysInfo,(m),(d))
#endif
#if !defined(ORBIT_DECL_GNOME_Pilot_Client) && !defined(_GNOME_Pilot_Client_defined)
#define ORBIT_DECL_GNOME_Pilot_Client 1
#define _GNOME_Pilot_Client_defined 1
#define GNOME_Pilot_Client__freekids CORBA_Object__freekids
typedef CORBA_Object GNOME_Pilot_Client;
extern CORBA_unsigned_long GNOME_Pilot_Client__classid;
#if !defined(TC_IMPL_TC_GNOME_Pilot_Client_0)
#define TC_IMPL_TC_GNOME_Pilot_Client_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_Client_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_Client_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_Client_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_Client_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_Client_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_Client_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_Client_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_Client_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_Client_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_Client_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_Client_struct;
#define TC_GNOME_Pilot_Client ((CORBA_TypeCode)&TC_GNOME_Pilot_Client_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_Pilot_Daemon) && !defined(_GNOME_Pilot_Daemon_defined)
#define ORBIT_DECL_GNOME_Pilot_Daemon 1
#define _GNOME_Pilot_Daemon_defined 1
#define GNOME_Pilot_Daemon__freekids CORBA_Object__freekids
typedef CORBA_Object GNOME_Pilot_Daemon;
extern CORBA_unsigned_long GNOME_Pilot_Daemon__classid;
#if !defined(TC_IMPL_TC_GNOME_Pilot_Daemon_0)
#define TC_IMPL_TC_GNOME_Pilot_Daemon_0 'g'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_1 'n'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_2 'o'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_3 'm'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_4 'e'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_5 '_'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_6 'p'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_7 'i'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_8 'l'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_9 'o'
#define TC_IMPL_TC_GNOME_Pilot_Daemon_10 't'
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_Pilot_Daemon_struct;
#define TC_GNOME_Pilot_Daemon ((CORBA_TypeCode)&TC_GNOME_Pilot_Daemon_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_GNOME_Pilot_Client
#define _defined_POA_GNOME_Pilot_Client 1
typedef struct {
  void *_private;
CORBA_string (*_get_client_id)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*_set_client_id)(PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment *ev);
void (*connect)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const GNOME_Pilot_UserInfo* userinfo, CORBA_Environment *ev);
void (*disconnect)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
void (*request_completed)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_unsigned_long request_id, CORBA_Environment *ev);
void (*userinfo_requested)(PortableServer_Servant _servant, const CORBA_char * device, const GNOME_Pilot_UserInfo* user, CORBA_Environment *ev);
void (*sysinfo_requested)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const GNOME_Pilot_SysInfo* sysinfo, CORBA_Environment *ev);
void (*conduit_start)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * database, CORBA_Environment *ev);
void (*conduit_progress)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev);
void (*conduit_end)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, CORBA_Environment *ev);
void (*overall_progress)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev);
void (*daemon_message)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void (*daemon_error)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * message, CORBA_Environment *ev);
void (*conduit_message)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void (*conduit_error)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void (*pause)(PortableServer_Servant _servant, const CORBA_boolean on_off, CORBA_Environment *ev);
} POA_GNOME_Pilot_Client__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_GNOME_Pilot_Client__epv *GNOME_Pilot_Client_epv;
} POA_GNOME_Pilot_Client__vepv;
typedef struct {
  void *_private;
  POA_GNOME_Pilot_Client__vepv *vepv;
} POA_GNOME_Pilot_Client;
extern void POA_GNOME_Pilot_Client__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_GNOME_Pilot_Client__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_GNOME_Pilot_Client */
#ifndef _defined_POA_GNOME_Pilot_Daemon
#define _defined_POA_GNOME_Pilot_Daemon 1
typedef struct {
  void *_private;
void (*pause)(PortableServer_Servant _servant, const CORBA_boolean on_off, CORBA_Environment *ev);
void (*reread_config)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*noop)(PortableServer_Servant _servant, CORBA_Environment *ev);
CORBA_unsigned_long (*request_install)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * file_name, const CORBA_char * description, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long (*request_restore)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * directory, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long (*request_conduit)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * conduit_name, const GNOME_Pilot_ConduitOperation operation, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long (*remove_request)(PortableServer_Servant _servant, const CORBA_unsigned_long handle, CORBA_Environment *ev);
CORBA_unsigned_long (*get_system_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_users)(PortableServer_Servant _servant, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_cradles)(PortableServer_Servant _servant, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_pilots)(PortableServer_Servant _servant, CORBA_Environment *ev);
GNOME_Pilot_LongSequence* (*get_pilot_ids)(PortableServer_Servant _servant, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_pilots_by_user_name)(PortableServer_Servant _servant, const CORBA_char * user, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_pilots_by_user_login)(PortableServer_Servant _servant, const CORBA_char * uid, CORBA_Environment *ev);
CORBA_string (*get_user_name_by_pilot_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string (*get_user_login_by_pilot_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string (*get_pilot_base_dir)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_long (*get_pilot_id_from_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string (*get_pilot_name_from_id)(PortableServer_Servant _servant, const CORBA_long pilot_id, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* (*get_databases_from_cache)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_unsigned_long (*get_user_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long (*set_user_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const GNOME_Pilot_UserInfo* user, const CORBA_char * cradle, const CORBA_boolean continue_sync, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
void (*monitor_on)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev);
void (*monitor_off)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev);
void (*notify_on)(PortableServer_Servant _servant, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev);
void (*notify_off)(PortableServer_Servant _servant, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev);
} POA_GNOME_Pilot_Daemon__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_GNOME_Pilot_Daemon__epv *GNOME_Pilot_Daemon_epv;
} POA_GNOME_Pilot_Daemon__vepv;
typedef struct {
  void *_private;
  POA_GNOME_Pilot_Daemon__vepv *vepv;
} POA_GNOME_Pilot_Daemon;
extern void POA_GNOME_Pilot_Daemon__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_GNOME_Pilot_Daemon__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_GNOME_Pilot_Daemon */

/** skel prototypes **/
void _ORBIT_skel_small_GNOME_Pilot_Client__get_client_id(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl__get_client_id)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client__set_client_id(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl__set_client_id)(PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_connect(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_connect)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const GNOME_Pilot_UserInfo* userinfo, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_disconnect(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_disconnect)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_request_completed(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_request_completed)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_unsigned_long request_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_userinfo_requested(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_userinfo_requested)(PortableServer_Servant _servant, const CORBA_char * device, const GNOME_Pilot_UserInfo* user, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_sysinfo_requested(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_sysinfo_requested)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const GNOME_Pilot_SysInfo* sysinfo, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_conduit_start(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_conduit_start)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * database, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_conduit_progress(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_conduit_progress)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_conduit_end(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_conduit_end)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_overall_progress(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_overall_progress)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_daemon_message(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_daemon_message)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_daemon_error(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_daemon_error)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * message, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_conduit_message(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_conduit_message)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_conduit_error(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_conduit_error)(PortableServer_Servant _servant, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Client_pause(POA_GNOME_Pilot_Client *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_pause)(PortableServer_Servant _servant, const CORBA_boolean on_off, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_pause(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_pause)(PortableServer_Servant _servant, const CORBA_boolean on_off, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_reread_config(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_reread_config)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_noop(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_noop)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_request_install(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_request_install)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * file_name, const CORBA_char * description, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_request_restore(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_request_restore)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * directory, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_request_conduit(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_request_conduit)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * conduit_name, const GNOME_Pilot_ConduitOperation operation, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_remove_request(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_remove_request)(PortableServer_Servant _servant, const CORBA_unsigned_long handle, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_system_info(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_get_system_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_users(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_users)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_cradles(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_cradles)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilots(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_pilots)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilot_ids(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_LongSequence* (*_impl_get_pilot_ids)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilots_by_user_name(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_pilots_by_user_name)(PortableServer_Servant _servant, const CORBA_char * user, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilots_by_user_login(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_pilots_by_user_login)(PortableServer_Servant _servant, const CORBA_char * uid, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_user_name_by_pilot_name(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_get_user_name_by_pilot_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_user_login_by_pilot_name(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_get_user_login_by_pilot_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilot_base_dir(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_get_pilot_base_dir)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilot_id_from_name(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_long (*_impl_get_pilot_id_from_name)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_pilot_name_from_id(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_get_pilot_name_from_id)(PortableServer_Servant _servant, const CORBA_long pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_databases_from_cache(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_Pilot_StringSequence* (*_impl_get_databases_from_cache)(PortableServer_Servant _servant, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_get_user_info(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_get_user_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_set_user_info(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_set_user_info)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const GNOME_Pilot_UserInfo* user, const CORBA_char * cradle, const CORBA_boolean continue_sync, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_monitor_on(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_monitor_on)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_monitor_off(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_monitor_off)(PortableServer_Servant _servant, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_notify_on(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_notify_on)(PortableServer_Servant _servant, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_Pilot_Daemon_notify_off(POA_GNOME_Pilot_Daemon *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_notify_off)(PortableServer_Servant _servant, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev));

/** stub prototypes **/
CORBA_string GNOME_Pilot_Client__get_client_id(GNOME_Pilot_Client _obj, CORBA_Environment *ev);
void GNOME_Pilot_Client__set_client_id(GNOME_Pilot_Client _obj, const CORBA_char * value, CORBA_Environment *ev);
void GNOME_Pilot_Client_connect(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const GNOME_Pilot_UserInfo* userinfo, CORBA_Environment *ev);
void GNOME_Pilot_Client_disconnect(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
void GNOME_Pilot_Client_request_completed(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_unsigned_long request_id, CORBA_Environment *ev);
void GNOME_Pilot_Client_userinfo_requested(GNOME_Pilot_Client _obj, const CORBA_char * device, const GNOME_Pilot_UserInfo* user, CORBA_Environment *ev);
void GNOME_Pilot_Client_sysinfo_requested(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const GNOME_Pilot_SysInfo* sysinfo, CORBA_Environment *ev);
void GNOME_Pilot_Client_conduit_start(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * database, CORBA_Environment *ev);
void GNOME_Pilot_Client_conduit_progress(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev);
void GNOME_Pilot_Client_conduit_end(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, CORBA_Environment *ev);
void GNOME_Pilot_Client_overall_progress(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_unsigned_long current, const CORBA_unsigned_long total, CORBA_Environment *ev);
void GNOME_Pilot_Client_daemon_message(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void GNOME_Pilot_Client_daemon_error(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * message, CORBA_Environment *ev);
void GNOME_Pilot_Client_conduit_message(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void GNOME_Pilot_Client_conduit_error(GNOME_Pilot_Client _obj, const CORBA_char * pilot_id, const CORBA_char * conduit, const CORBA_char * message, CORBA_Environment *ev);
void GNOME_Pilot_Client_pause(GNOME_Pilot_Client _obj, const CORBA_boolean on_off, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_pause(GNOME_Pilot_Daemon _obj, const CORBA_boolean on_off, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_reread_config(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_noop(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_request_install(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * file_name, const CORBA_char * description, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_request_restore(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * directory, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_request_conduit(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, const CORBA_char * conduit_name, const GNOME_Pilot_ConduitOperation operation, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_remove_request(GNOME_Pilot_Daemon _obj, const CORBA_unsigned_long handle, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_get_system_info(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_users(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_cradles(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_pilots(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
GNOME_Pilot_LongSequence* GNOME_Pilot_Daemon_get_pilot_ids(GNOME_Pilot_Daemon _obj, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_pilots_by_user_name(GNOME_Pilot_Daemon _obj, const CORBA_char * user, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_pilots_by_user_login(GNOME_Pilot_Daemon _obj, const CORBA_char * uid, CORBA_Environment *ev);
CORBA_string GNOME_Pilot_Daemon_get_user_name_by_pilot_name(GNOME_Pilot_Daemon _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string GNOME_Pilot_Daemon_get_user_login_by_pilot_name(GNOME_Pilot_Daemon _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string GNOME_Pilot_Daemon_get_pilot_base_dir(GNOME_Pilot_Daemon _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_long GNOME_Pilot_Daemon_get_pilot_id_from_name(GNOME_Pilot_Daemon _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_string GNOME_Pilot_Daemon_get_pilot_name_from_id(GNOME_Pilot_Daemon _obj, const CORBA_long pilot_id, CORBA_Environment *ev);
GNOME_Pilot_StringSequence* GNOME_Pilot_Daemon_get_databases_from_cache(GNOME_Pilot_Daemon _obj, const CORBA_char * pilot_id, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_get_user_info(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * cradle, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
CORBA_unsigned_long GNOME_Pilot_Daemon_set_user_info(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const GNOME_Pilot_UserInfo* user, const CORBA_char * cradle, const CORBA_boolean continue_sync, const GNOME_Pilot_Survival survival, const CORBA_unsigned_long timeout, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_monitor_on(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_monitor_off(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_Client cb, const CORBA_char * pilot_id, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_notify_on(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev);
void GNOME_Pilot_Daemon_notify_off(GNOME_Pilot_Daemon _obj, const GNOME_Pilot_EventType event, const GNOME_Pilot_Client cb, CORBA_Environment *ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static 
#else
extern 
#endif
ORBit_IInterface GNOME_Pilot_Client__iinterface;
#define GNOME_Pilot_Client_IMETHODS_LEN 16
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static 
#else
extern 
#endif
ORBit_IMethod GNOME_Pilot_Client__imethods[GNOME_Pilot_Client_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static 
#else
extern 
#endif
ORBit_IInterface GNOME_Pilot_Daemon__iinterface;
#define GNOME_Pilot_Daemon_IMETHODS_LEN 26
#ifdef ORBIT_IDL_C_IMODULE_gnome_pilot
static 
#else
extern 
#endif
ORBit_IMethod GNOME_Pilot_Daemon__imethods[GNOME_Pilot_Daemon_IMETHODS_LEN];

/** IMethods index */

#ifndef __GNOME_Pilot_Client__imethods_index
#define __GNOME_Pilot_Client__imethods_index
typedef enum {
	GNOME_Pilot_Client__get_client_id__imethods_index,
	GNOME_Pilot_Client__set_client_id__imethods_index,
	GNOME_Pilot_Client_connect__imethods_index,
	GNOME_Pilot_Client_disconnect__imethods_index,
	GNOME_Pilot_Client_request_completed__imethods_index,
	GNOME_Pilot_Client_userinfo_requested__imethods_index,
	GNOME_Pilot_Client_sysinfo_requested__imethods_index,
	GNOME_Pilot_Client_conduit_start__imethods_index,
	GNOME_Pilot_Client_conduit_progress__imethods_index,
	GNOME_Pilot_Client_conduit_end__imethods_index,
	GNOME_Pilot_Client_overall_progress__imethods_index,
	GNOME_Pilot_Client_daemon_message__imethods_index,
	GNOME_Pilot_Client_daemon_error__imethods_index,
	GNOME_Pilot_Client_conduit_message__imethods_index,
	GNOME_Pilot_Client_conduit_error__imethods_index,
	GNOME_Pilot_Client_pause__imethods_index
} GNOME_Pilot_Client__imethods_index;
#endif /* __GNOME_Pilot_Client__imethods_index */

#ifndef __GNOME_Pilot_Daemon__imethods_index
#define __GNOME_Pilot_Daemon__imethods_index
typedef enum {
	GNOME_Pilot_Daemon_pause__imethods_index,
	GNOME_Pilot_Daemon_reread_config__imethods_index,
	GNOME_Pilot_Daemon_noop__imethods_index,
	GNOME_Pilot_Daemon_request_install__imethods_index,
	GNOME_Pilot_Daemon_request_restore__imethods_index,
	GNOME_Pilot_Daemon_request_conduit__imethods_index,
	GNOME_Pilot_Daemon_remove_request__imethods_index,
	GNOME_Pilot_Daemon_get_system_info__imethods_index,
	GNOME_Pilot_Daemon_get_users__imethods_index,
	GNOME_Pilot_Daemon_get_cradles__imethods_index,
	GNOME_Pilot_Daemon_get_pilots__imethods_index,
	GNOME_Pilot_Daemon_get_pilot_ids__imethods_index,
	GNOME_Pilot_Daemon_get_pilots_by_user_name__imethods_index,
	GNOME_Pilot_Daemon_get_pilots_by_user_login__imethods_index,
	GNOME_Pilot_Daemon_get_user_name_by_pilot_name__imethods_index,
	GNOME_Pilot_Daemon_get_user_login_by_pilot_name__imethods_index,
	GNOME_Pilot_Daemon_get_pilot_base_dir__imethods_index,
	GNOME_Pilot_Daemon_get_pilot_id_from_name__imethods_index,
	GNOME_Pilot_Daemon_get_pilot_name_from_id__imethods_index,
	GNOME_Pilot_Daemon_get_databases_from_cache__imethods_index,
	GNOME_Pilot_Daemon_get_user_info__imethods_index,
	GNOME_Pilot_Daemon_set_user_info__imethods_index,
	GNOME_Pilot_Daemon_monitor_on__imethods_index,
	GNOME_Pilot_Daemon_monitor_off__imethods_index,
	GNOME_Pilot_Daemon_notify_on__imethods_index,
	GNOME_Pilot_Daemon_notify_off__imethods_index
} GNOME_Pilot_Daemon__imethods_index;
#endif /* __GNOME_Pilot_Daemon__imethods_index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
