/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __GNOME_PILOT_CLIENT_H__
#define __GNOME_PILOT_CLIENT_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



#include <config.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <gtk/gtkobject.h>
#include <bonobo-activation/bonobo-activation.h>
#include <libbonobo.h>
#include <gpilotd/gnome-pilot.h>

#ifdef WITH_VFS
#include <libgnomevfs/gnome-vfs.h>
#endif

enum GPilotdErrCode {
	GPILOTD_OK=0,
	GPILOTD_ERR_INVAL=-1,
	GPILOTD_ERR_NOT_CONNECTED=-2,
	GPILOTD_ERR_FAILED=-3,
	GPILOTD_ERR_INTERNAL=-4
};



/*
 * Type checking and casting macros
 */
#define GNOME_TYPE_PILOT_CLIENT	(gnome_pilot_client_get_type())
#define GNOME_PILOT_CLIENT(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gnome_pilot_client_get_type(), GnomePilotClient)
#define GNOME_PILOT_CLIENT_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gnome_pilot_client_get_type(), GnomePilotClient const)
#define GNOME_PILOT_CLIENT_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), gnome_pilot_client_get_type(), GnomePilotClientClass)
#define GNOME_IS_PILOT_CLIENT(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), gnome_pilot_client_get_type ())

#define GNOME_PILOT_CLIENT_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), gnome_pilot_client_get_type(), GnomePilotClientClass)

/*
 * Main object structure
 */
#ifndef __TYPEDEF_GNOME_PILOT_CLIENT__
#define __TYPEDEF_GNOME_PILOT_CLIENT__
typedef struct _GnomePilotClient GnomePilotClient;
#endif
struct _GnomePilotClient {
	GtkObject __parent__;
	/*< public >*/
	GNOME_Pilot_Daemon gpilotddaemon;
	GNOME_Pilot_Client gpilotdclient;
	CORBA_Environment ev;
	CORBA_char * client_id;
	CORBA_ORB orb;
};

/*
 * Class definition
 */
typedef struct _GnomePilotClientClass GnomePilotClientClass;
struct _GnomePilotClientClass {
	GtkObjectClass __parent__;
	/*signal*/void (* pilot_connect) (GnomePilotClient * self, const gchar * pilot_name, const GNOME_Pilot_UserInfo * userinfo);
	/*signal*/void (* pilot_disconnect) (GnomePilotClient * self, const gchar * pilot_name);
	/*signal*/void (* completed_request) (GnomePilotClient * self, const gchar * pilot_name, unsigned long request_id);
	/*signal*/void (* user_info) (GnomePilotClient * self, const gchar * device, const GNOME_Pilot_UserInfo * userinfo);
	/*signal*/void (* system_info) (GnomePilotClient * self, const gchar * device, const GNOME_Pilot_SysInfo * sysinfo);
	/*signal*/void (* start_conduit) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name, const gchar * database);
	/*signal*/void (* end_conduit) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name);
	/*signal*/void (* progress_conduit) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name, guint current, guint total);
	/*signal*/void (* progress_overall) (GnomePilotClient * self, const gchar * pilot_name, guint current, guint total);
	/*signal*/void (* message_conduit) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name, const gchar * message);
	/*signal*/void (* message_daemon) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name, const gchar * message);
	/*signal*/void (* error_daemon) (GnomePilotClient * self, const gchar * pilot_name, const gchar * message);
	/*signal*/void (* error_conduit) (GnomePilotClient * self, const gchar * pilot_name, const gchar * conduit_name, const gchar * message);
	/*signal*/void (* daemon_pause) (GnomePilotClient * self, gboolean on_off);
};


/*
 * Public methods
 */
GType	gnome_pilot_client_get_type	(void);
GtkObject * 	gnome_pilot_client_new	(void);
void 	gnome_pilot_client_destroy	(GnomePilotClient * self);
gint 	gnome_pilot_client_connect_to_daemon	(GnomePilotClient * self);
void 	gnome_pilot_client_pilot_connect	(GnomePilotClient * self,
					const gchar * pilot_name,
					const GNOME_Pilot_UserInfo * userinfo);
void 	gnome_pilot_client_pilot_disconnect	(GnomePilotClient * self,
					const gchar * pilot_name);
void 	gnome_pilot_client_completed_request	(GnomePilotClient * self,
					const gchar * pilot_name,
					unsigned long request_id);
void 	gnome_pilot_client_user_info	(GnomePilotClient * self,
					const gchar * device,
					const GNOME_Pilot_UserInfo * userinfo);
void 	gnome_pilot_client_system_info	(GnomePilotClient * self,
					const gchar * device,
					const GNOME_Pilot_SysInfo * sysinfo);
void 	gnome_pilot_client_start_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					const gchar * database);
void 	gnome_pilot_client_end_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name);
void 	gnome_pilot_client_progress_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					guint current,
					guint total);
void 	gnome_pilot_client_progress_overall	(GnomePilotClient * self,
					const gchar * pilot_name,
					guint current,
					guint total);
void 	gnome_pilot_client_message_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					const gchar * message);
void 	gnome_pilot_client_message_daemon	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					const gchar * message);
void 	gnome_pilot_client_error_daemon	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * message);
void 	gnome_pilot_client_error_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					const gchar * message);
void 	gnome_pilot_client_daemon_pause	(GnomePilotClient * self,
					gboolean on_off);
gint 	gnome_pilot_client_pause_daemon	(GnomePilotClient * self);
gint 	gnome_pilot_client_unpause_daemon	(GnomePilotClient * self);
gint 	gnome_pilot_client_reread_config	(GnomePilotClient * self);
gint 	gnome_pilot_client_noop	(GnomePilotClient * self);
gint 	gnome_pilot_client_restart_daemon	(GnomePilotClient * self);
gint 	gnome_pilot_client_monitor_on	(GnomePilotClient * self,
					const gchar * pilot_id);
gint 	gnome_pilot_client_monitor_on_all_pilots	(GnomePilotClient * self);
gint 	gnome_pilot_client_monitor_off	(GnomePilotClient * self,
					const gchar * pilot_id);
gint 	gnome_pilot_client_monitor_off_all_pilots	(GnomePilotClient * self);
gint 	gnome_pilot_client_notify_on	(GnomePilotClient * self,
					GNOME_Pilot_EventType type);
gint 	gnome_pilot_client_notify_off	(GnomePilotClient * self,
					GNOME_Pilot_EventType type);
gint 	gnome_pilot_client_restore	(GnomePilotClient * self,
					const gchar * pilot_id,
					const gchar * directory,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_install_file	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * infile,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_get_user_info	(GnomePilotClient * self,
					gchar * cradle_name,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_set_user_info	(GnomePilotClient * self,
					gchar * cradle_name,
					GNOME_Pilot_UserInfo user,
					gboolean continue_sync,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_get_system_info	(GnomePilotClient * self,
					gchar * cradle_name,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_remove_request	(GnomePilotClient * self,
					gint handle);
gint 	gnome_pilot_client_conduit	(GnomePilotClient * self,
					const gchar * pilot_name,
					const gchar * conduit_name,
					GNOME_Pilot_ConduitOperation operation,
					GNOME_Pilot_Survival survival,
					gint timeout,
					gint * handle);
gint 	gnome_pilot_client_get_users	(GnomePilotClient * self,
					GList ** output);
gint 	gnome_pilot_client_get_databases_from_cache	(GnomePilotClient * self,
					const gchar * pilot_name,
					GList ** output);
gint 	gnome_pilot_client_get_cradles	(GnomePilotClient * self,
					GList ** output);
gint 	gnome_pilot_client_get_pilots	(GnomePilotClient * self,
					GList ** output);
gint 	gnome_pilot_client_get_pilot_ids	(GnomePilotClient * self,
					gint ** output);
gint 	gnome_pilot_client_get_pilots_by_user_name	(GnomePilotClient * self,
					const gchar * name,
					GList ** output);
gint 	gnome_pilot_client_get_pilots_by_user_login	(GnomePilotClient * self,
					const gchar * login,
					GList ** output);
gint 	gnome_pilot_client_get_user_name_by_pilot_name	(GnomePilotClient * self,
					const gchar * pilot_name,
					gchar ** output);
gint 	gnome_pilot_client_get_user_login_by_pilot_name	(GnomePilotClient * self,
					const gchar * pilot_name,
					gchar ** output);
gint 	gnome_pilot_client_get_pilot_base_dir_by_name	(GnomePilotClient * self,
					const gchar * pilot_name,
					gchar ** output);
gint 	gnome_pilot_client_get_pilot_base_dir_by_id	(GnomePilotClient * self,
					guint32 pilot_id,
					gchar ** output);
gint 	gnome_pilot_client_get_pilot_id_by_name	(GnomePilotClient * self,
					const gchar * pilot_name,
					guint32 * output);
gint 	gnome_pilot_client_get_pilot_name_by_id	(GnomePilotClient * self,
					guint32 pilot_id,
					gchar ** output);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define gnome_pilot_client_connect__pilot_connect(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_connect",(GCallback) __extension__ ({void (* ___pilot_connect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___pilot_connect; }), (data))
#define gnome_pilot_client_connect_after__pilot_connect(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_connect",(GCallback) __extension__ ({void (* ___pilot_connect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___pilot_connect; }), (data))
#define gnome_pilot_client_connect_data__pilot_connect(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_connect",(GCallback) __extension__ ({void (* ___pilot_connect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___pilot_connect; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__pilot_disconnect(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_disconnect",(GCallback) __extension__ ({void (* ___pilot_disconnect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, gpointer ___data ) = (func); ___pilot_disconnect; }), (data))
#define gnome_pilot_client_connect_after__pilot_disconnect(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_disconnect",(GCallback) __extension__ ({void (* ___pilot_disconnect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, gpointer ___data ) = (func); ___pilot_disconnect; }), (data))
#define gnome_pilot_client_connect_data__pilot_disconnect(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"pilot_disconnect",(GCallback) __extension__ ({void (* ___pilot_disconnect) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, gpointer ___data ) = (func); ___pilot_disconnect; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__completed_request(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"completed_request",(GCallback) __extension__ ({void (* ___completed_request) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, unsigned long ___fake___request_id, gpointer ___data ) = (func); ___completed_request; }), (data))
#define gnome_pilot_client_connect_after__completed_request(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"completed_request",(GCallback) __extension__ ({void (* ___completed_request) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, unsigned long ___fake___request_id, gpointer ___data ) = (func); ___completed_request; }), (data))
#define gnome_pilot_client_connect_data__completed_request(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"completed_request",(GCallback) __extension__ ({void (* ___completed_request) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, unsigned long ___fake___request_id, gpointer ___data ) = (func); ___completed_request; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__user_info(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"user_info",(GCallback) __extension__ ({void (* ___user_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___user_info; }), (data))
#define gnome_pilot_client_connect_after__user_info(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"user_info",(GCallback) __extension__ ({void (* ___user_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___user_info; }), (data))
#define gnome_pilot_client_connect_data__user_info(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"user_info",(GCallback) __extension__ ({void (* ___user_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_UserInfo * ___fake___userinfo, gpointer ___data ) = (func); ___user_info; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__system_info(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"system_info",(GCallback) __extension__ ({void (* ___system_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_SysInfo * ___fake___sysinfo, gpointer ___data ) = (func); ___system_info; }), (data))
#define gnome_pilot_client_connect_after__system_info(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"system_info",(GCallback) __extension__ ({void (* ___system_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_SysInfo * ___fake___sysinfo, gpointer ___data ) = (func); ___system_info; }), (data))
#define gnome_pilot_client_connect_data__system_info(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"system_info",(GCallback) __extension__ ({void (* ___system_info) (GnomePilotClient * ___fake___self, const gchar * ___fake___device, const GNOME_Pilot_SysInfo * ___fake___sysinfo, gpointer ___data ) = (func); ___system_info; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__start_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"start_conduit",(GCallback) __extension__ ({void (* ___start_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___database, gpointer ___data ) = (func); ___start_conduit; }), (data))
#define gnome_pilot_client_connect_after__start_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"start_conduit",(GCallback) __extension__ ({void (* ___start_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___database, gpointer ___data ) = (func); ___start_conduit; }), (data))
#define gnome_pilot_client_connect_data__start_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"start_conduit",(GCallback) __extension__ ({void (* ___start_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___database, gpointer ___data ) = (func); ___start_conduit; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__end_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"end_conduit",(GCallback) __extension__ ({void (* ___end_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, gpointer ___data ) = (func); ___end_conduit; }), (data))
#define gnome_pilot_client_connect_after__end_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"end_conduit",(GCallback) __extension__ ({void (* ___end_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, gpointer ___data ) = (func); ___end_conduit; }), (data))
#define gnome_pilot_client_connect_data__end_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"end_conduit",(GCallback) __extension__ ({void (* ___end_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, gpointer ___data ) = (func); ___end_conduit; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__progress_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_conduit",(GCallback) __extension__ ({void (* ___progress_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_conduit; }), (data))
#define gnome_pilot_client_connect_after__progress_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_conduit",(GCallback) __extension__ ({void (* ___progress_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_conduit; }), (data))
#define gnome_pilot_client_connect_data__progress_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_conduit",(GCallback) __extension__ ({void (* ___progress_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_conduit; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__progress_overall(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_overall",(GCallback) __extension__ ({void (* ___progress_overall) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_overall; }), (data))
#define gnome_pilot_client_connect_after__progress_overall(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_overall",(GCallback) __extension__ ({void (* ___progress_overall) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_overall; }), (data))
#define gnome_pilot_client_connect_data__progress_overall(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"progress_overall",(GCallback) __extension__ ({void (* ___progress_overall) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, guint ___fake___current, guint ___fake___total, gpointer ___data ) = (func); ___progress_overall; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__message_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_conduit",(GCallback) __extension__ ({void (* ___message_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_conduit; }), (data))
#define gnome_pilot_client_connect_after__message_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_conduit",(GCallback) __extension__ ({void (* ___message_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_conduit; }), (data))
#define gnome_pilot_client_connect_data__message_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_conduit",(GCallback) __extension__ ({void (* ___message_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_conduit; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__message_daemon(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_daemon",(GCallback) __extension__ ({void (* ___message_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_daemon; }), (data))
#define gnome_pilot_client_connect_after__message_daemon(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_daemon",(GCallback) __extension__ ({void (* ___message_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_daemon; }), (data))
#define gnome_pilot_client_connect_data__message_daemon(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"message_daemon",(GCallback) __extension__ ({void (* ___message_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___message_daemon; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__error_daemon(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_daemon",(GCallback) __extension__ ({void (* ___error_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_daemon; }), (data))
#define gnome_pilot_client_connect_after__error_daemon(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_daemon",(GCallback) __extension__ ({void (* ___error_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_daemon; }), (data))
#define gnome_pilot_client_connect_data__error_daemon(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_daemon",(GCallback) __extension__ ({void (* ___error_daemon) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_daemon; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__error_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_conduit",(GCallback) __extension__ ({void (* ___error_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_conduit; }), (data))
#define gnome_pilot_client_connect_after__error_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_conduit",(GCallback) __extension__ ({void (* ___error_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_conduit; }), (data))
#define gnome_pilot_client_connect_data__error_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"error_conduit",(GCallback) __extension__ ({void (* ___error_conduit) (GnomePilotClient * ___fake___self, const gchar * ___fake___pilot_name, const gchar * ___fake___conduit_name, const gchar * ___fake___message, gpointer ___data ) = (func); ___error_conduit; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_client_connect__daemon_pause(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"daemon_pause",(GCallback) __extension__ ({void (* ___daemon_pause) (GnomePilotClient * ___fake___self, gboolean ___fake___on_off, gpointer ___data ) = (func); ___daemon_pause; }), (data))
#define gnome_pilot_client_connect_after__daemon_pause(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"daemon_pause",(GCallback) __extension__ ({void (* ___daemon_pause) (GnomePilotClient * ___fake___self, gboolean ___fake___on_off, gpointer ___data ) = (func); ___daemon_pause; }), (data))
#define gnome_pilot_client_connect_data__daemon_pause(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(__extension__ ({GnomePilotClient *___object = (object); ___object; })),"daemon_pause",(GCallback) __extension__ ({void (* ___daemon_pause) (GnomePilotClient * ___fake___self, gboolean ___fake___on_off, gpointer ___data ) = (func); ___daemon_pause; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define gnome_pilot_client_connect__pilot_connect(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"pilot_connect",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__pilot_connect(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"pilot_connect",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__pilot_connect(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"pilot_connect",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__pilot_disconnect(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"pilot_disconnect",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__pilot_disconnect(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"pilot_disconnect",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__pilot_disconnect(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"pilot_disconnect",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__completed_request(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"completed_request",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__completed_request(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"completed_request",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__completed_request(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"completed_request",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__user_info(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"user_info",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__user_info(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"user_info",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__user_info(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"user_info",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__system_info(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"system_info",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__system_info(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"system_info",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__system_info(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"system_info",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__start_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"start_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__start_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"start_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__start_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"start_conduit",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__end_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"end_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__end_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"end_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__end_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"end_conduit",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__progress_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"progress_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__progress_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"progress_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__progress_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"progress_conduit",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__progress_overall(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"progress_overall",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__progress_overall(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"progress_overall",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__progress_overall(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"progress_overall",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__message_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"message_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__message_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"message_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__message_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"message_conduit",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__message_daemon(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"message_daemon",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__message_daemon(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"message_daemon",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__message_daemon(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"message_daemon",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__error_daemon(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"error_daemon",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__error_daemon(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"error_daemon",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__error_daemon(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"error_daemon",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__error_conduit(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"error_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__error_conduit(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"error_conduit",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__error_conduit(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"error_conduit",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_client_connect__daemon_pause(object,func,data)	g_signal_connect(GNOME_PILOT_CLIENT(object),"daemon_pause",(GCallback)(func),(data))
#define gnome_pilot_client_connect_after__daemon_pause(object,func,data)	g_signal_connect_after(GNOME_PILOT_CLIENT(object),"daemon_pause",(GCallback)(func),(data))
#define gnome_pilot_client_connect_data__daemon_pause(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CLIENT(object),"daemon_pause",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
