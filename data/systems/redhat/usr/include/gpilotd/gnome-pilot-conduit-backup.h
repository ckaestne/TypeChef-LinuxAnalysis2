/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __GNOME_PILOT_CONDUIT_BACKUP_H__
#define __GNOME_PILOT_CONDUIT_BACKUP_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



#include <gnome.h>
#include "gnome-pilot-conduit.h"
#include "gnome-pilot-conduit-file.h"
#include "gnome-pilot-dbinfo.h"

typedef gint (*GnomePilotConduitBackupRestore) (gchar *filename, gint, gint, gpointer data);	



/*
 * Type checking and casting macros
 */
#define GNOME_TYPE_PILOT_CONDUIT_BACKUP	(gnome_pilot_conduit_backup_get_type())
#define GNOME_PILOT_CONDUIT_BACKUP(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gnome_pilot_conduit_backup_get_type(), GnomePilotConduitBackup)
#define GNOME_PILOT_CONDUIT_BACKUP_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gnome_pilot_conduit_backup_get_type(), GnomePilotConduitBackup const)
#define GNOME_PILOT_CONDUIT_BACKUP_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), gnome_pilot_conduit_backup_get_type(), GnomePilotConduitBackupClass)
#define GNOME_IS_PILOT_CONDUIT_BACKUP(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), gnome_pilot_conduit_backup_get_type ())

#define GNOME_PILOT_CONDUIT_BACKUP_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), gnome_pilot_conduit_backup_get_type(), GnomePilotConduitBackupClass)

/*
 * Main object structure
 */
#ifndef __TYPEDEF_GNOME_PILOT_CONDUIT_BACKUP__
#define __TYPEDEF_GNOME_PILOT_CONDUIT_BACKUP__
typedef struct _GnomePilotConduitBackup GnomePilotConduitBackup;
#endif
struct _GnomePilotConduitBackup {
	GnomePilotConduit __parent__;
	/*< private >*/
	GPilotPilot * pilot; /* protected */
};

/*
 * Class definition
 */
typedef struct _GnomePilotConduitBackupClass GnomePilotConduitBackupClass;
struct _GnomePilotConduitBackupClass {
	GnomePilotConduitClass __parent__;
	/*signal*/int (* backup) (GnomePilotConduitBackup * self, GnomePilotDBInfo * dbinfo);
	/*signal*/int (* restore) (GnomePilotConduitBackup * self, int pisock, char * directory, GnomePilotConduitBackupRestore func, gpointer func_data);
};


/*
 * Public methods
 */
GType	gnome_pilot_conduit_backup_get_type	(void);
GtkObject * 	gnome_pilot_conduit_backup_new	(GPilotPilot * pilot);
int 	gnome_pilot_conduit_backup_backup	(GnomePilotConduitBackup * self,
					GnomePilotDBInfo * dbinfo);
int 	gnome_pilot_conduit_backup_restore	(GnomePilotConduitBackup * self,
					int pisock,
					char * directory,
					GnomePilotConduitBackupRestore func,
					gpointer func_data);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define gnome_pilot_conduit_backup_connect__backup(object,func,data)	g_signal_connect(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"backup",(GCallback) __extension__ ({int (* ___backup) (GnomePilotConduitBackup * ___fake___self, GnomePilotDBInfo * ___fake___dbinfo, gpointer ___data ) = (func); ___backup; }), (data))
#define gnome_pilot_conduit_backup_connect_after__backup(object,func,data)	g_signal_connect_after(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"backup",(GCallback) __extension__ ({int (* ___backup) (GnomePilotConduitBackup * ___fake___self, GnomePilotDBInfo * ___fake___dbinfo, gpointer ___data ) = (func); ___backup; }), (data))
#define gnome_pilot_conduit_backup_connect_data__backup(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"backup",(GCallback) __extension__ ({int (* ___backup) (GnomePilotConduitBackup * ___fake___self, GnomePilotDBInfo * ___fake___dbinfo, gpointer ___data ) = (func); ___backup; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gnome_pilot_conduit_backup_connect__restore(object,func,data)	g_signal_connect(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"restore",(GCallback) __extension__ ({int (* ___restore) (GnomePilotConduitBackup * ___fake___self, int ___fake___pisock, char * ___fake___directory, GnomePilotConduitBackupRestore ___fake___func, gpointer ___fake___func_data, gpointer ___data ) = (func); ___restore; }), (data))
#define gnome_pilot_conduit_backup_connect_after__restore(object,func,data)	g_signal_connect_after(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"restore",(GCallback) __extension__ ({int (* ___restore) (GnomePilotConduitBackup * ___fake___self, int ___fake___pisock, char * ___fake___directory, GnomePilotConduitBackupRestore ___fake___func, gpointer ___fake___func_data, gpointer ___data ) = (func); ___restore; }), (data))
#define gnome_pilot_conduit_backup_connect_data__restore(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CONDUIT_BACKUP(__extension__ ({GnomePilotConduitBackup *___object = (object); ___object; })),"restore",(GCallback) __extension__ ({int (* ___restore) (GnomePilotConduitBackup * ___fake___self, int ___fake___pisock, char * ___fake___directory, GnomePilotConduitBackupRestore ___fake___func, gpointer ___fake___func_data, gpointer ___data ) = (func); ___restore; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define gnome_pilot_conduit_backup_connect__backup(object,func,data)	g_signal_connect(GNOME_PILOT_CONDUIT_BACKUP(object),"backup",(GCallback)(func),(data))
#define gnome_pilot_conduit_backup_connect_after__backup(object,func,data)	g_signal_connect_after(GNOME_PILOT_CONDUIT_BACKUP(object),"backup",(GCallback)(func),(data))
#define gnome_pilot_conduit_backup_connect_data__backup(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CONDUIT_BACKUP(object),"backup",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gnome_pilot_conduit_backup_connect__restore(object,func,data)	g_signal_connect(GNOME_PILOT_CONDUIT_BACKUP(object),"restore",(GCallback)(func),(data))
#define gnome_pilot_conduit_backup_connect_after__restore(object,func,data)	g_signal_connect_after(GNOME_PILOT_CONDUIT_BACKUP(object),"restore",(GCallback)(func),(data))
#define gnome_pilot_conduit_backup_connect_data__restore(object,func,data,destroy_data,flags)	g_signal_connect_data(GNOME_PILOT_CONDUIT_BACKUP(object),"restore",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define GNOME_PILOT_CONDUIT_BACKUP_PROP_PILOT(arg)    	"pilot", __extension__ ({GPilotPilot * z = (arg); z;})
#define GNOME_PILOT_CONDUIT_BACKUP_GET_PROP_PILOT(arg)	"pilot", __extension__ ({GPilotPilot * *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define GNOME_PILOT_CONDUIT_BACKUP_PROP_PILOT(arg)    	"pilot",(GPilotPilot * )(arg)
#define GNOME_PILOT_CONDUIT_BACKUP_GET_PROP_PILOT(arg)	"pilot",(GPilotPilot * *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
